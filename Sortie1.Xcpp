/*
 * sortie.cpp
 *
 * gestion des sortie (74hc165)
 *
 *  Created on: 22 août 2018
 *      Author: xavier Gouraud
 */
#include "Sortie.h"
#include "Comunication.h"


// constructeur par default
Sortie::Sortie() {
	EEPROM.get(ADD_NB_74HC165,NB_74HC165); // lecture du nb de 74HC165 dans la memoire EEProm
	// on initialise le tableau des sortie a 255 pour desactiver tous les relais
	// la taille du tableau corespond au nb de 74hc165 gere.
	relais_sortie=new byte[NB_74HC165](255);// !!! un new !!!
	// initialisation des pin de l'arduino pour gere les 74HC165
	pinMode(VALIDE_PIN_SORTIE, OUTPUT);
	pinMode(DONNEE_PIN_SORTIE, OUTPUT);
	pinMode(HORLOGE_PIN_SORTIE, OUTPUT);

	// on envoie un message pour dir que l'on vien de cree l'object (debug)
	com->println(MSG_CREATION_SORTIE,NB_74HC165);
	// on met a jour les relais.
	ecritureSortie();
}

// destructeur
Sortie::~Sortie()
{
	// on envoie un message pour dir que l'on vien de detruire l'object (debug)
	com->println(MSG_DESTRUCTION_SORTIE);
	delete relais_sortie;
	delay(100);// ici pour corriger un bug.
}

// envoie du tableau relais_sortie vers les 74hc165
void Sortie::ecritureSortie()
{

	digitalWrite(VALIDE_PIN_SORTIE, LOW); // on desactive la pin valide_sortie pour dire que les donnee ne sont pas stable
	for (int8_t i = NB_74HC165-1; i>=0; i--) { // pour chaque 74hc165
		shiftOut(DONNEE_PIN_SORTIE, HORLOGE_PIN_SORTIE, LSBFIRST, relais_sortie[(byte)i]); // j'ecrit la valeur du tableau relais_sortie qui lui correspond
		//Serial.print(i);
		//Serial.println(relais_sortie[(byte)i]);
	}
	digitalWrite(VALIDE_PIN_SORTIE, HIGH); // on active la pin valide_sortie pour dire que les donnee sont stable
	delay(100);
	// on envoie un message pour dir que l'on vien d'ecrire sur les sorties (debug)
	//com->println(MSG_ECRITURE_SORTIE);
}

// activation du relais passer en parametre
void Sortie::activer(byte relais) {
	{
//		if (relais<6){
//		   digitalWrite(relais+1, HIGH);
//		   com->println(MSG_ACTIVATION_SORTIE,relais+1);
//		}
		relais--; // on commance au relais 0 en informatique
		byte num74HC165 = relais / 8; // je calcul le numero du circuit (74hc595) a utiliser.
		byte sortie74HC165 = (relais % 8); // quelle sortie sur ce circuit.
		// j'active le relais.
		bitClear(relais_sortie[num74HC165], sortie74HC165);
		ecritureSortie();
		// on envoie un message pour dir que l'on vien d'activer une sortie
		com->println(MSG_ACTIVATION_SORTIE,relais+1);
	}
}

// desactivation du relais passer en parametre
void Sortie::desactiver(byte relais) {
	{
//		if (relais<6){
//				   digitalWrite(relais+1, LOW);
//				   com->println(MSG_DESACTIVATION_SORTIE,relais+1);
//				}
		relais--;// on commance au relais 0 en informatique
		byte num74HC165 = relais / 8; // je calcul le numero du circuit (74hc595) a utiliser.
		byte sortie74HC165 = (relais % 8); // quelle sortie sur ce circuit.
		// je desactive le relais.
		bitSet(relais_sortie[num74HC165], sortie74HC165);
		ecritureSortie();
		// on envoie un message pour dir que l'on vien de desactiver une sortie
		if (relais+1!=5){
			com->println(MSG_DESACTIVATION_SORTIE,relais+1);
		}
	}
}

// affichage du tableau relais_sortie
// permet de faire des synchro ou des test.
void Sortie::lectureSortie()
{
	for (int8_t i = NB_74HC165-1; i>=0; i--) { // pour chaque 74hc165
		com->print(MSG_LECTURE_SORTIE,i); // j'affiche le numero du 74hc165
		com->println(relais_sortie[i]); //j'afiche sa valeur
	}
}


// pour les test
// activer le relais taper au clavier et desactive le relais suivant
void Sortie::test()
{
	if (Serial.available())
	{
		char ch = Serial.read(); // lecture d'un caractere
		byte led = ch - '0'; // transforamtion pour avoir un numero de relais
		// message
		Serial.print("debug activer ");
		Serial.println(led);
		activer(led); // activation du relais
		Serial.print("debug desactiver ");
		Serial.println(led+1);
		desactiver(led+1); //desactivation du relais
	}
}
